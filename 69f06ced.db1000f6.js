(window.webpackJsonp=window.webpackJsonp||[]).push([[399],{1006:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),b=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,b=function(e,t){if(null==e)return{};var a,n,b={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}var o=b.a.createContext({}),d=function(e){var t=b.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return b.a.createElement(o.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},j=b.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),p=d(a),j=n,m=p["".concat(l,".").concat(j)]||p[j]||O[j]||r;return a?b.a.createElement(m,i(i({ref:t},o),{},{components:a})):b.a.createElement(m,i({ref:t},o))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=j;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var o=2;o<r;o++)l[o]=a[o];return b.a.createElement.apply(null,l)}return b.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"},483:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(2),b=a(7),r=(a(0),a(1006)),l={id:"layout-props",title:"Layout Props"},i={unversionedId:"layout-props",id:"version-0.60/layout-props",isDocsHomePage:!1,title:"Layout Props",description:"Reference",source:"@site/versioned_docs/version-0.60/layout-props.md",slug:"/layout-props",permalink:"/docs/0.60/layout-props",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/versioned_docs/version-0.60/layout-props.md",version:"0.60",lastUpdatedAt:1603945169,sidebar:"version-0.60/api",previous:{title:"Keyboard",permalink:"/docs/0.60/keyboard"},next:{title:"LayoutAnimation",permalink:"/docs/0.60/layoutanimation"}},c=[{value:"Props",id:"props",children:[{value:"<code>alignContent</code>",id:"aligncontent",children:[]},{value:"<code>alignItems</code>",id:"alignitems",children:[]},{value:"<code>alignSelf</code>",id:"alignself",children:[]},{value:"<code>aspectRatio</code>",id:"aspectratio",children:[]},{value:"<code>borderBottomWidth</code>",id:"borderbottomwidth",children:[]},{value:"<code>borderEndWidth</code>",id:"borderendwidth",children:[]},{value:"<code>borderLeftWidth</code>",id:"borderleftwidth",children:[]},{value:"<code>borderRightWidth</code>",id:"borderrightwidth",children:[]},{value:"<code>borderStartWidth</code>",id:"borderstartwidth",children:[]},{value:"<code>borderTopWidth</code>",id:"bordertopwidth",children:[]},{value:"<code>borderWidth</code>",id:"borderwidth",children:[]},{value:"<code>bottom</code>",id:"bottom",children:[]},{value:"<code>direction</code>",id:"direction",children:[]},{value:"<code>display</code>",id:"display",children:[]},{value:"<code>end</code>",id:"end",children:[]},{value:"<code>flex</code>",id:"flex",children:[]},{value:"<code>flexBasis</code>",id:"flexbasis",children:[]},{value:"<code>flexDirection</code>",id:"flexdirection",children:[]},{value:"<code>flexGrow</code>",id:"flexgrow",children:[]},{value:"<code>flexShrink</code>",id:"flexshrink",children:[]},{value:"<code>flexWrap</code>",id:"flexwrap",children:[]},{value:"<code>height</code>",id:"height",children:[]},{value:"<code>justifyContent</code>",id:"justifycontent",children:[]},{value:"<code>left</code>",id:"left",children:[]},{value:"<code>margin</code>",id:"margin",children:[]},{value:"<code>marginBottom</code>",id:"marginbottom",children:[]},{value:"<code>marginEnd</code>",id:"marginend",children:[]},{value:"<code>marginHorizontal</code>",id:"marginhorizontal",children:[]},{value:"<code>marginLeft</code>",id:"marginleft",children:[]},{value:"<code>marginRight</code>",id:"marginright",children:[]},{value:"<code>marginStart</code>",id:"marginstart",children:[]},{value:"<code>marginTop</code>",id:"margintop",children:[]},{value:"<code>marginVertical</code>",id:"marginvertical",children:[]},{value:"<code>maxHeight</code>",id:"maxheight",children:[]},{value:"<code>maxWidth</code>",id:"maxwidth",children:[]},{value:"<code>minHeight</code>",id:"minheight",children:[]},{value:"<code>minWidth</code>",id:"minwidth",children:[]},{value:"<code>overflow</code>",id:"overflow",children:[]},{value:"<code>padding</code>",id:"padding",children:[]},{value:"<code>paddingBottom</code>",id:"paddingbottom",children:[]},{value:"<code>paddingEnd</code>",id:"paddingend",children:[]},{value:"<code>paddingHorizontal</code>",id:"paddinghorizontal",children:[]},{value:"<code>paddingLeft</code>",id:"paddingleft",children:[]},{value:"<code>paddingRight</code>",id:"paddingright",children:[]},{value:"<code>paddingStart</code>",id:"paddingstart",children:[]},{value:"<code>paddingTop</code>",id:"paddingtop",children:[]},{value:"<code>paddingVertical</code>",id:"paddingvertical",children:[]},{value:"<code>position</code>",id:"position",children:[]},{value:"<code>right</code>",id:"right",children:[]},{value:"<code>start</code>",id:"start",children:[]},{value:"<code>top</code>",id:"top",children:[]},{value:"<code>width</code>",id:"width",children:[]},{value:"<code>zIndex</code>",id:"zindex",children:[]}]}],o={rightToc:c};function d(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"reference"},"Reference"),Object(r.b)("h2",{id:"props"},"Props"),Object(r.b)("h3",{id:"aligncontent"},Object(r.b)("inlineCode",{parentName:"h3"},"alignContent")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"alignContent")," controls how rows align in the cross direction, overriding the ",Object(r.b)("inlineCode",{parentName:"p"},"alignContent")," of the parent. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"alignitems"},Object(r.b)("inlineCode",{parentName:"h3"},"alignItems")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"alignItems")," aligns children in the cross direction. For example, if children are flowing vertically, ",Object(r.b)("inlineCode",{parentName:"p"},"alignItems")," controls how they align horizontally. It works like ",Object(r.b)("inlineCode",{parentName:"p"},"align-items")," in CSS (default: stretch). See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('flex-start', 'flex-end', 'center', 'stretch', 'baseline')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"alignself"},Object(r.b)("inlineCode",{parentName:"h3"},"alignSelf")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"alignSelf")," controls how a child aligns in the cross direction, overriding the ",Object(r.b)("inlineCode",{parentName:"p"},"alignItems")," of the parent. It works like ",Object(r.b)("inlineCode",{parentName:"p"},"align-self")," in CSS (default: auto). See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/align-self")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"aspectratio"},Object(r.b)("inlineCode",{parentName:"h3"},"aspectRatio")),Object(r.b)("p",null,"Aspect ratio controls the size of the undefined dimension of a node. Aspect ratio is a non-standard property only available in React Native and not CSS."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"On a node with a set width/height aspect ratio controls the size of the unset dimension"),Object(r.b)("li",{parentName:"ul"},"On a node with a set flex basis aspect ratio controls the size of the node in the cross axis if unset"),Object(r.b)("li",{parentName:"ul"},"On a node with a measure function aspect ratio works as though the measure function measures the flex basis"),Object(r.b)("li",{parentName:"ul"},"On a node with flex grow/shrink aspect ratio controls the size of the node in the cross axis if unset"),Object(r.b)("li",{parentName:"ul"},"Aspect ratio takes min/max dimensions into account")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"borderbottomwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"borderBottomWidth")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"borderBottomWidth")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"border-bottom-width")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"borderendwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"borderEndWidth")),Object(r.b)("p",null,"When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"borderEndWidth")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"borderRightWidth"),". When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"borderEndWidth")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"borderLeftWidth"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"borderleftwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"borderLeftWidth")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"borderLeftWidth")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"border-left-width")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"borderrightwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"borderRightWidth")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"borderRightWidth")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"border-right-width")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"borderstartwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"borderStartWidth")),Object(r.b)("p",null,"When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"borderStartWidth")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"borderLeftWidth"),". When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"borderStartWidth")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"borderRightWidth"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"bordertopwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"borderTopWidth")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"borderTopWidth")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"border-top-width")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"borderwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"borderWidth")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"borderWidth")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"border-width")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"bottom"},Object(r.b)("inlineCode",{parentName:"h3"},"bottom")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"bottom")," is the number of logical pixels to offset the bottom edge of this component."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"bottom")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/bottom"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/bottom")," for more details of how ",Object(r.b)("inlineCode",{parentName:"p"},"bottom")," affects layout."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"direction"},Object(r.b)("inlineCode",{parentName:"h3"},"direction")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"direction")," specifies the directional flow of the user interface. The default is ",Object(r.b)("inlineCode",{parentName:"p"},"inherit"),", except for root node which will have value based on the current locale. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://yogalayout.com/docs/layout-direction"}),"https://yogalayout.com/docs/layout-direction")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Platform"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('inherit', 'ltr', 'rtl')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"iOS")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"display"},Object(r.b)("inlineCode",{parentName:"h3"},"display")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"display")," sets the display type of this component."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"display")," in CSS, but only support 'flex' and 'none'. 'flex' is the default."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('none', 'flex')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"end"},Object(r.b)("inlineCode",{parentName:"h3"},"end")),Object(r.b)("p",null,"When the direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"end")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"right"),". When the direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"end")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"left"),"."),Object(r.b)("p",null,"This style takes precedence over the ",Object(r.b)("inlineCode",{parentName:"p"},"left")," and ",Object(r.b)("inlineCode",{parentName:"p"},"right")," styles."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"flex"},Object(r.b)("inlineCode",{parentName:"h3"},"flex")),Object(r.b)("p",null,"In React Native ",Object(r.b)("inlineCode",{parentName:"p"},"flex")," does not work the same way that it does in CSS. ",Object(r.b)("inlineCode",{parentName:"p"},"flex")," is a number rather than a string, and it works according to the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebook/yoga"}),"Yoga"),"."),Object(r.b)("p",null,"When ",Object(r.b)("inlineCode",{parentName:"p"},"flex")," is a positive number, it makes the component flexible and it will be sized proportional to its flex value. So a component with ",Object(r.b)("inlineCode",{parentName:"p"},"flex")," set to 2 will take twice the space as a component with ",Object(r.b)("inlineCode",{parentName:"p"},"flex")," set to 1. ",Object(r.b)("inlineCode",{parentName:"p"},"flex: <positive number>")," equates to ",Object(r.b)("inlineCode",{parentName:"p"},"flexGrow: <positive number>, flexShrink: 1, flexBasis: 0"),"."),Object(r.b)("p",null,"When ",Object(r.b)("inlineCode",{parentName:"p"},"flex")," is 0, the component is sized according to ",Object(r.b)("inlineCode",{parentName:"p"},"width")," and ",Object(r.b)("inlineCode",{parentName:"p"},"height")," and it is inflexible."),Object(r.b)("p",null,"When ",Object(r.b)("inlineCode",{parentName:"p"},"flex")," is -1, the component is normally sized according ",Object(r.b)("inlineCode",{parentName:"p"},"width")," and ",Object(r.b)("inlineCode",{parentName:"p"},"height"),". However, if there's not enough space, the component will shrink to its ",Object(r.b)("inlineCode",{parentName:"p"},"minWidth")," and ",Object(r.b)("inlineCode",{parentName:"p"},"minHeight"),"."),Object(r.b)("p",null,"flexGrow, flexShrink, and flexBasis work the same as in CSS."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"flexbasis"},Object(r.b)("inlineCode",{parentName:"h3"},"flexBasis")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"flexdirection"},Object(r.b)("inlineCode",{parentName:"h3"},"flexDirection")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"flexDirection")," controls which directions children of a container go. ",Object(r.b)("inlineCode",{parentName:"p"},"row")," goes left to right, ",Object(r.b)("inlineCode",{parentName:"p"},"column")," goes top to bottom, and you may be able to guess what the other two do. It works like ",Object(r.b)("inlineCode",{parentName:"p"},"flex-direction")," in CSS, except the default is ",Object(r.b)("inlineCode",{parentName:"p"},"column"),". See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('row', 'row-reverse', 'column', 'column-reverse')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"flexgrow"},Object(r.b)("inlineCode",{parentName:"h3"},"flexGrow")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"flexshrink"},Object(r.b)("inlineCode",{parentName:"h3"},"flexShrink")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"flexwrap"},Object(r.b)("inlineCode",{parentName:"h3"},"flexWrap")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"flexWrap")," controls whether children can wrap around after they hit the end of a flex container. It works like ",Object(r.b)("inlineCode",{parentName:"p"},"flex-wrap")," in CSS (default: nowrap). See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap")," for more details. Note it does not work anymore with ",Object(r.b)("inlineCode",{parentName:"p"},"alignItems: stretch")," (the default), so you may want to use ",Object(r.b)("inlineCode",{parentName:"p"},"alignItems: flex-start")," for example (breaking change details: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebook/react-native/releases/tag/v0.28.0"}),"https://github.com/facebook/react-native/releases/tag/v0.28.0"),")."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('wrap', 'nowrap')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"height"},Object(r.b)("inlineCode",{parentName:"h3"},"height")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"height")," sets the height of this component."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"height")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/height"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/height")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"justifycontent"},Object(r.b)("inlineCode",{parentName:"h3"},"justifyContent")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"justifyContent")," aligns children in the main direction. For example, if children are flowing vertically, ",Object(r.b)("inlineCode",{parentName:"p"},"justifyContent")," controls how they align vertically. It works like ",Object(r.b)("inlineCode",{parentName:"p"},"justify-content")," in CSS (default: flex-start). See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"left"},Object(r.b)("inlineCode",{parentName:"h3"},"left")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"left")," is the number of logical pixels to offset the left edge of this component."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"left")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/left"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/left")," for more details of how ",Object(r.b)("inlineCode",{parentName:"p"},"left")," affects layout."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"margin"},Object(r.b)("inlineCode",{parentName:"h3"},"margin")),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"margin")," has the same effect as setting each of ",Object(r.b)("inlineCode",{parentName:"p"},"marginTop"),", ",Object(r.b)("inlineCode",{parentName:"p"},"marginLeft"),", ",Object(r.b)("inlineCode",{parentName:"p"},"marginBottom"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"marginRight"),". See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"marginbottom"},Object(r.b)("inlineCode",{parentName:"h3"},"marginBottom")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"marginBottom")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"margin-bottom")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"marginend"},Object(r.b)("inlineCode",{parentName:"h3"},"marginEnd")),Object(r.b)("p",null,"When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"marginEnd")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"marginRight"),". When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"marginEnd")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"marginLeft"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"marginhorizontal"},Object(r.b)("inlineCode",{parentName:"h3"},"marginHorizontal")),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"marginHorizontal")," has the same effect as setting both ",Object(r.b)("inlineCode",{parentName:"p"},"marginLeft")," and ",Object(r.b)("inlineCode",{parentName:"p"},"marginRight"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"marginleft"},Object(r.b)("inlineCode",{parentName:"h3"},"marginLeft")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"marginLeft")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"margin-left")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"marginright"},Object(r.b)("inlineCode",{parentName:"h3"},"marginRight")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"marginRight")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"margin-right")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"marginstart"},Object(r.b)("inlineCode",{parentName:"h3"},"marginStart")),Object(r.b)("p",null,"When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"marginStart")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"marginLeft"),". When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"marginStart")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"marginRight"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"margintop"},Object(r.b)("inlineCode",{parentName:"h3"},"marginTop")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"marginTop")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"margin-top")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"marginvertical"},Object(r.b)("inlineCode",{parentName:"h3"},"marginVertical")),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"marginVertical")," has the same effect as setting both ",Object(r.b)("inlineCode",{parentName:"p"},"marginTop")," and ",Object(r.b)("inlineCode",{parentName:"p"},"marginBottom"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"maxheight"},Object(r.b)("inlineCode",{parentName:"h3"},"maxHeight")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"maxHeight")," is the maximum height for this component, in logical pixels."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"max-height")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/max-height"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/max-height")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"maxwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"maxWidth")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"maxWidth")," is the maximum width for this component, in logical pixels."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"max-width")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/max-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/max-width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"minheight"},Object(r.b)("inlineCode",{parentName:"h3"},"minHeight")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"minHeight")," is the minimum height for this component, in logical pixels."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"min-height")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/min-height"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/min-height")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"minwidth"},Object(r.b)("inlineCode",{parentName:"h3"},"minWidth")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"minWidth")," is the minimum width for this component, in logical pixels."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"min-width")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/min-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/min-width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"overflow"},Object(r.b)("inlineCode",{parentName:"h3"},"overflow")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"overflow")," controls how children are measured and displayed. ",Object(r.b)("inlineCode",{parentName:"p"},"overflow: hidden")," causes views to be clipped while ",Object(r.b)("inlineCode",{parentName:"p"},"overflow: scroll")," causes views to be measured independently of their parents main axis. It works like ",Object(r.b)("inlineCode",{parentName:"p"},"overflow")," in CSS (default: visible). See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en/docs/Web/CSS/overflow"}),"https://developer.mozilla.org/en/docs/Web/CSS/overflow")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('visible', 'hidden', 'scroll')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"padding"},Object(r.b)("inlineCode",{parentName:"h3"},"padding")),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"padding")," has the same effect as setting each of ",Object(r.b)("inlineCode",{parentName:"p"},"paddingTop"),", ",Object(r.b)("inlineCode",{parentName:"p"},"paddingBottom"),", ",Object(r.b)("inlineCode",{parentName:"p"},"paddingLeft"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"paddingRight"),". See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddingbottom"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingBottom")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"paddingBottom")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"padding-bottom")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddingend"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingEnd")),Object(r.b)("p",null,"When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"paddingEnd")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"paddingRight"),". When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"paddingEnd")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"paddingLeft"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddinghorizontal"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingHorizontal")),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"paddingHorizontal")," is like setting both of ",Object(r.b)("inlineCode",{parentName:"p"},"paddingLeft")," and ",Object(r.b)("inlineCode",{parentName:"p"},"paddingRight"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddingleft"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingLeft")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"paddingLeft")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"padding-left")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddingright"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingRight")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"paddingRight")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"padding-right")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddingstart"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingStart")),Object(r.b)("p",null,"When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"paddingStart")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"paddingLeft"),". When direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"paddingStart")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"paddingRight"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddingtop"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingTop")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"paddingTop")," works like ",Object(r.b)("inlineCode",{parentName:"p"},"padding-top")," in CSS. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, ,string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"paddingvertical"},Object(r.b)("inlineCode",{parentName:"h3"},"paddingVertical")),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"paddingVertical")," is like setting both of ",Object(r.b)("inlineCode",{parentName:"p"},"paddingTop")," and ",Object(r.b)("inlineCode",{parentName:"p"},"paddingBottom"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"position"},Object(r.b)("inlineCode",{parentName:"h3"},"position")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"position")," in React Native is similar to regular CSS, but everything is set to ",Object(r.b)("inlineCode",{parentName:"p"},"relative")," by default, so ",Object(r.b)("inlineCode",{parentName:"p"},"absolute")," positioning is always relative to the parent."),Object(r.b)("p",null,"If you want to position a child using specific numbers of logical pixels relative to its parent, set the child to have ",Object(r.b)("inlineCode",{parentName:"p"},"absolute")," position."),Object(r.b)("p",null,"If you want to position a child relative to something that is not its parent, don't use styles for that. Use the component tree."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebook/yoga"}),"https://github.com/facebook/yoga")," for more details on how ",Object(r.b)("inlineCode",{parentName:"p"},"position")," differs between React Native and CSS."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum('absolute', 'relative')"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"right"},Object(r.b)("inlineCode",{parentName:"h3"},"right")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"right")," is the number of logical pixels to offset the right edge of this component."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"right")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/right"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/right")," for more details of how ",Object(r.b)("inlineCode",{parentName:"p"},"right")," affects layout."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"start"},Object(r.b)("inlineCode",{parentName:"h3"},"start")),Object(r.b)("p",null,"When the direction is ",Object(r.b)("inlineCode",{parentName:"p"},"ltr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"start")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"left"),". When the direction is ",Object(r.b)("inlineCode",{parentName:"p"},"rtl"),", ",Object(r.b)("inlineCode",{parentName:"p"},"start")," is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"right"),"."),Object(r.b)("p",null,"This style takes precedence over the ",Object(r.b)("inlineCode",{parentName:"p"},"left"),", ",Object(r.b)("inlineCode",{parentName:"p"},"right"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"end")," styles."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"top"},Object(r.b)("inlineCode",{parentName:"h3"},"top")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"top")," is the number of logical pixels to offset the top edge of this component."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"top")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/top"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/top")," for more details of how ",Object(r.b)("inlineCode",{parentName:"p"},"top")," affects layout."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"width"},Object(r.b)("inlineCode",{parentName:"h3"},"width")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"width")," sets the width of this component."),Object(r.b)("p",null,"It works similarly to ",Object(r.b)("inlineCode",{parentName:"p"},"width")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/width")," for more details."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number, string"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"zindex"},Object(r.b)("inlineCode",{parentName:"h3"},"zIndex")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"zIndex")," controls which components display on top of others. Normally, you don't use ",Object(r.b)("inlineCode",{parentName:"p"},"zIndex"),". Components render according to their order in the document tree, so later components draw over earlier ones. ",Object(r.b)("inlineCode",{parentName:"p"},"zIndex")," may be useful if you have animations or custom modal interfaces where you don't want this behavior."),Object(r.b)("p",null,"It works like the CSS ",Object(r.b)("inlineCode",{parentName:"p"},"z-index")," property - components with a larger ",Object(r.b)("inlineCode",{parentName:"p"},"zIndex")," will render on top. Think of the z-direction like it's pointing from the phone into your eyeball. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/z-index")," for more details."),Object(r.b)("p",null,"On iOS, ",Object(r.b)("inlineCode",{parentName:"p"},"zIndex")," may require ",Object(r.b)("inlineCode",{parentName:"p"},"View"),"s to be siblings of each other for it to work as expected."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No")))),Object(r.b)("hr",null))}d.isMDXComponent=!0}}]);